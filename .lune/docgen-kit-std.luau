-- local kit = require("./lib/kit")
-- local fsUtils = require("./lib/fs-utils")
-- local fs = require("@lune/fs")
-- local MoonwaveExtractor = require("./lib/moonwave-extractor")

-- local BLACKLISTED = { CoreTemplate = true, ["init.luau"] = true }
-- local KIT_OBJECT_TAG = "KitObjectTag"

-- local coreKitScriptsDir = fsUtils.path(kit.MIRROR_DIR, "ReplicatedStorage", "KitStd")
-- local outputDir = fsUtils.path("src", "content", "docs", "objects")

-- local function sortByName(lhs: any, rhs: any)
-- 	return lhs.name < rhs.name
-- end

-- kit.writeKitModules()
-- assert(fs.isDir(coreKitScriptsDir), `Cannot collect core KitScripts at {coreKitScriptsDir}`)

-- local allExtracted = MoonwaveExtractor.extract(coreKitScriptsDir)
-- table.sort(allExtracted, sortByName)

-- for _, extracted in allExtracted do
-- 	if BLACKLISTED[extracted.name] then
-- 		continue
-- 	end

-- 	if not extracted.tags or not table.find(extracted.tags, KIT_OBJECT_TAG) then
-- 		continue
-- 	end

-- 	local contents = ""
-- 	contents ..= "---"
-- 	contents ..= "\n"
-- 	contents ..= `title: {extracted.name}`
-- 	contents ..= "\n"
-- 	contents ..= `description: {extracted.desc}`
-- 	contents ..= "\n"
-- 	contents ..= "---"
-- 	contents ..= "\n\n"
-- 	contents ..= "<!-- This file was @generated by `just docgen-kit-objects`. -->"
-- 	contents ..= "\n\n"
-- 	contents ..= extracted.desc

-- 	-- NOTE: for this tag we  treat moonwave properties as instance attributes
-- 	if #extracted.properties > 0 then
-- 		table.sort(extracted.properties, sortByName)
-- 		contents ..= "\n\n"
-- 		contents ..= "## Attributes"
-- 		contents ..= "\n\n"
-- 		for _, attribute in extracted.properties do
-- 			contents ..= "### "
-- 			contents ..= attribute.name
-- 			contents ..= "\n\n"
-- 			contents ..= "```luau"
-- 			contents ..= "\n\n"
-- 			contents ..= extracted.name
-- 			contents ..= "."
-- 			contents ..= attribute.name
-- 			contents ..= ": "
-- 			contents ..= attribute.lua_type
-- 			contents ..= "\n\n"
-- 			contents ..= "```"
-- 			contents ..= "\n\n"
-- 			contents ..= attribute.desc
-- 			contents ..= "\n\n"
-- 		end
-- 	end

-- 	local path = fsUtils.path(outputDir, extracted.name .. ".md")
-- 	print("Writing to path", path)
-- 	fs.writeFile(path, contents)
-- end
