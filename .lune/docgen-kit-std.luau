--!nolint LocalShadow

local kit = require("./lib/kit")
local fsUtils = require("./lib/fs-utils")
local fs = require("@lune/fs")
local MoonwaveExtractor = require("./lib/moonwave-extractor")

local stdDir = fsUtils.path(kit.MIRROR_DIR, "ReplicatedStorage", "KitStd")
local outputDir = fsUtils.path("src", "content", "docs", "std")

local function sortByName(lhs: any, rhs: any)
	return lhs.name < rhs.name
end

assert(fs.isDir(stdDir), `Cannot collect KitStd at {stdDir}`)

local allExtracted = MoonwaveExtractor.extract(stdDir)
table.sort(allExtracted, sortByName)

for _, extracted in allExtracted do
	local contents = ""
	contents ..= "---"
	contents ..= "\n"
	contents ..= `title: {extracted.name}`
	contents ..= "\n"
	contents ..= `description: {extracted.desc:split("\n")[1]}`
	contents ..= "\n"
	contents ..= "---"
	contents ..= "\n\n"
	contents ..= "<!-- This file was @generated by `just docgen-kit-std`. -->"
	contents ..= "\n\n"
	contents ..= extracted.desc

	if #extracted.properties > 0 then
		table.sort(extracted.properties, sortByName)
		contents ..= "\n\n"
		contents ..= "## Properties"
		contents ..= "\n\n"
		for _, property in extracted.properties do
			contents ..= "### "
			contents ..= property.name
			contents ..= "\n\n"
			contents ..= "```luau"
			contents ..= "\n\n"
			contents ..= extracted.name
			contents ..= "."
			contents ..= property.name
			contents ..= ": "
			contents ..= property.lua_type
			contents ..= "\n\n"
			contents ..= "```"
			contents ..= "\n\n"
			contents ..= property.desc
			contents ..= "\n\n"
		end
	end

	if #extracted.functions > 0 then
		table.sort(extracted.functions, sortByName)
		contents ..= "\n\n"
		contents ..= "## Functions"
		contents ..= "\n\n"
		local fnContents = {}
		for _, fn in extracted.functions do
			local contents = ""
			contents ..= "### "
			contents ..= fn.name
			contents ..= "\n\n"
			contents ..= "```luau"
			contents ..= "\nfunction "
			contents ..= extracted.name
			contents ..= "."
			contents ..= fn.name
			contents ..= "("
			local numParams = #fn.params
			if numParams == 1 then
				local param = fn.params[1]
				contents ..= param.name
				contents ..= ": "
				contents ..= param.lua_type
			elseif numParams > 1 then
				local params = {}
				for _, param in fn.params do
					table.insert(params, "\n\t" .. param.name .. ": " .. param.lua_type)
				end
				contents ..= table.concat(params, ",")
				contents ..= "\n"
			end
			contents ..= "): "
			local numReturns = #fn.returns
			if numReturns == 1 then
				contents ..= fn.returns[1].lua_type
			elseif numReturns > 1 then
				local returns = {}
				for _, r in fn.returns do
					table.insert(returns, r.lua_type)
				end
				contents ..= "("
				contents ..= table.concat(returns, ", ")
				contents ..= ")"
			else
				contents ..= "()"
			end
			contents ..= "\n"
			contents ..= "```"
			contents ..= "\n\n"
			contents ..= fn.desc
			contents ..= "\n\n"
			if numParams > 0 then
				contents ..= "#### Parameters"
				for _, param in fn.params do
					contents ..= "\n\n"
					contents ..= "##### "
					contents ..= param.name
					contents ..= " <small>`: "
					contents ..= param.lua_type:gsub("\n", "")
					contents ..= "`</small>"
					contents ..= "\n\n"
					contents ..= param.desc
				end
			end
			if numReturns > 0 then
				contents ..= "\n\n#### Returns"

				for _, r in fn.returns do
					contents ..= "\n\n"
					contents ..= "##### "
					contents ..= " `"
					contents ..= r.lua_type:gsub("\n", "")
					contents ..= "`"
					contents ..= "\n\n"
					contents ..= r.desc
					contents ..= "`"
				end
			end
			table.insert(fnContents, contents)
		end
		contents ..= table.concat(fnContents, "\n\n---\n\n")
	end

	local path = fsUtils.path(outputDir, extracted.name .. ".md")
	print("Writing to path", path)
	fs.writeFile(path, contents)
end
